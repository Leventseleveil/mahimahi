#!/usr/bin/perl

# converts a trace FROM varying rate (in kilobits per millisecond, // 从可变速率转成trace文件（以千比特/毫秒为单位，每毫秒采样一次）
# sampled once per millisecond)
# TO packet delivery occurrences (millisecond timestamps when an // 数据包交付事件（MTU大小的数据报，即12000位，可交付时的毫秒时间戳）
# MTU-sized datagram, i.e. 12,000 bits, can be delivered)
#
# The latter is the format that mm-link expects. // 后者是mm-link所期望的格式。（即traces文件
#
# KJW 7/28/2017

# 该程序的作用：将吞吐量（Kb/ms）转换为trace文件
# 具体转换公式为：
# 凑齐1500KB/ms 一个发送时间戳
# 如果1ms内发送了多个1500KB，则输出多个相同的时间戳

# bandwidth = length of link queue * |cos ms| * lambda
# lambda = 0.1

# 引用模块
use strict; # 让所有变量需要强制声明类型 
use warnings;
use Scalar::Util qw[looks_like_number];
use POSIX qw[ceil];

my $ms = 0; # 现实时间 单位ms
my $time = 0; # my是私有变量， 标量 $ 开始
my $reserve_bits = 0; # 缓冲的bits
my $PACKET_LENGTH = 12000; # bits = 1500B
my $kilobits_this_millisecond = 0;

# input trace gives a number of kilobits that can be delivered each millisecond 输入跟踪给出了每毫秒可以传输的千位数
while (1) { # kilobits_this_millisecond 千比特这毫秒， <> 表示输入测参数
  # $kilobits_this_millisecond = 3 * abs(cos($ms)) * rand(10); # 期望在1～48之间取数
  # $ms = $ms + rand();
  $kilobits_this_millisecond = rand(36);
  chomp $kilobits_this_millisecond; # 如果字符串结尾有换行符，chomp 可以去掉它 https://blog.csdn.net/wesleyluo/article/details/5862706
  die qq{Not a number: "$kilobits_this_millisecond"} # 检查是不是一个数，粗错误处理
    unless looks_like_number $kilobits_this_millisecond;

  # add current rate to "reserve" 将当前速度保存
  $reserve_bits += 1000 * $kilobits_this_millisecond; # *1k 转换成KB

  # if reserve has enough bits for a packet, deliver it now 如果reserve有足够的数据包位，请立即发送
  # output trace gives timestamps of packet delivery occurrences 输出跟踪提供数据包传递事件的时间戳
  while ( $reserve_bits >= $PACKET_LENGTH ) { # 只要输出数加起来大于PACKET_LENGTH了就输出一次，相当于吞吐量
    print qq{$time\n};
    $reserve_bits -= $PACKET_LENGTH;
  }

  # advance time by one millisecond 将时间前进一毫秒
  $time++;
  sleep(1); # 这个函数令脚本睡眠 EXPR 秒，如果没有 EXPR 则是永久睡眠
}
